import random
import string
import hashlib
import json
import os
import requests

# Function to generate a random secret
def generate_secret(length=16):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

# Function to hash the secret
def hash_secret(secret):
    return hashlib.sha256(secret.encode('utf-8')).hexdigest()

def addPackageFromManifest(path):
    if not os.path.exists(path):
        print(f"[{RED}error{RESET}] Manifest file {path} not found.")
        sys.exit(1)

    with open(path, "r") as f:
        manifest = json.load(f)

    if "name" not in manifest or "url" not in manifest:
        print(f"[{RED}error{RESET}] Manifest must include 'name' and 'url'.")
        sys.exit(1)

    # Check if the secret is already provided in the manifest, if not, generate one
    if "secret" not in manifest:
        manifest["secret"] = generate_secret()

    # Hash the secret before storing it
    hashed_secret = hash_secret(manifest["secret"])

    payload = {
        "name": manifest["name"],
        "url": manifest["url"],
        "deps": manifest.get("zpkg", []),
        "pypi": manifest.get("pypi", []),
        "other": manifest.get("other", []),
        "secret": hashed_secret  # Store the hashed secret here
    }

    try:
        response = requests.post(FLASK_API_ADD, json=payload)
        if response.status_code == 200:
            print(f"[{GREEN}success{RESET}] Package '{manifest['name']}' added successfully.")
        else:
            print(f"[{RED}error{RESET}] Error adding package: {response.text}")
    except Exception as e:
        print(f"[{RED}error{RESET}] Failed to contact server: {e}")
