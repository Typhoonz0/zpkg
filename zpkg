#!/usr/bin/python3

import sys
import json
import os
import urllib.request
import subprocess
import shutil
import random
import string
import hashlib
import re 

if os.name != "nt":
    RED = "\033[31m"
    BLUE = "\033[36m"
    GREEN = "\033[32m"
    RESET = "\033[0m"
else:
    RED, BLUE, GREEN, RESET = "", "", "", ""

try: 
    import requests
except ImportError: 
    print(f"[{RED}error{RESET}] Please run pip install requests.") 
    sys.exit()

SCRDIR = os.path.dirname(os.path.abspath(__file__))
DB_FILE = os.path.join(SCRDIR, "pkgdb.json")
PKG_DIR = os.path.join(SCRDIR, "packages")

DB_URL = "https://zpkg.fly.dev/list"  
FLASK_API_ADD = "https://zpkg.fly.dev/add"
FLASK_API_REMOVE = "https://zpkg.fly.dev/remove"
VERSION = "0.6.6"

def ping():
    pass

def docs(topic):
    add = fr"""[{GREEN}Adding Packages to Database{RESET}]
Create a manifest.json file containing any of these arguments:
(name, url, secret are compulsory)
{{
    "name": "package-name-use-hyphens-or-underscores",
    "url": "git-url e.g. https://github.com/Typhoonz0/zpkg.git",
    "deps": "zpkg dependencies space seperated",
    "pypi": "pip dependencies space seperated",
    "other": "runs commands in shell e.g. yay -S package or ./more.sh",
    "secret": "Dont add spaces and keep this safe! you need it to remove your package from the database."
}}
Then, run:
zpkg add manifest.json"""

    remove = fr"""[{GREEN}Removing Packages from Database{RESET}]
If you want to remove a package you installed, see uninstall.
Find your packages name, then the secret you provided in the manifest.json file, 
or that was provided to you in the terminal on adding. Without this secret, you cannot remove it.
Then, run:
zpkg remove pkg-name secret"""

    update = fr"""[{GREEN}Updating Package Database{RESET}]
If you want to update a package you installed, see upgrade.
zpkg works by taking a database of links and manages them all under one program.
When a new package is added to the database, users will need to update their local database to see it.
zpkg update"""

    upgrade = fr"""[{GREEN}Upgrading Packages{RESET}]
If there are updates to a package, it will automatically download them. It will also remove everything in the directory,
so please use another location to back up files. Otherwise, it will inform you the package is up to date.
zpkg upgrade"""

    install = fr"""[{GREEN}Installing Packages{RESET}]
Packages will be installed wherever zpkg is installed and into the packages directory, as in:
/home/user/zpkg/packages/package-name or 
C:\Users\Username\zpkg\packages\package-name
Install a package by running:
zpkg install pkg-name
See a list of packages by running:
zpkg list"""

    uninstall = fr"""[{GREEN}Uninstalling Packages{RESET}]
If you want to remove a package from the database too, see remove.
It will remove everything in the /zpkg/packages/package-name directory,
so please use another location to back up files. 
zpkg uninstall pkg-name"""

    if topic.lower() == "add":
        print(add)
    elif topic.lower() == "remove":
        print(remove) 
    elif topic.lower() == "update":
        print(update) 
    elif topic.lower() == "upgrade":
        print(upgrade) 
    elif topic.lower() == "install":
        print(install) 
    elif topic.lower() == "uninstall":
        print(uninstall) 
    else: 
        print(f"[{RED}error{RESET}] No doc entry for {topic} Options are add, remove, update, upgrade, install, uninstall.")
def listPackages():
    db = loadDatabase()
    if not db:
        print(f"[{RED}error{RESET}] No packages found in the database.")
        return

    print(f"[{BLUE}notice{RESET}] Available packages:")
    for name, info in db.items():
        print(f"- {name}: {info.get('url', 'No URL')}")


def queryPackage(pkg):
    db = loadDatabase()
    if not db or pkg not in db:
        print(f"[{RED}error{RESET}] No packages found with the name {pkg}.")
        return

    info = db[pkg]
    print(f"- {pkg}: {info}")


def listLocalPackages():
    db = loadDatabase()
    local_path = os.path.join(SCRDIR, "packages")
    if not os.path.exists(local_path):
        print(f"[{RED}error{RESET}] No local packages directory found.")
        return

    found = False
    for pkg in os.listdir(local_path):
        if pkg in db:
            print(f"- {pkg}")
            found = True
    if not found:
        print(f"[{RED}error{RESET}] No locally installed packages matched the database.")


def queryLocalPackage(pkg):
    db = loadDatabase()
    local_path = os.path.join(SCRDIR, "packages")
    if not os.path.exists(local_path):
        print(f"[{RED}error{RESET}] No local packages directory found.")
        return

    if pkg in os.listdir(local_path) and pkg in db:
        info = db[pkg]
        print(f"- {pkg}: {info}")
    else:
        print(f"[{RED}error{RESET}] Package {pkg} not installed or not found in database.")


def downloadFile(url, dest):
    print(f"[{BLUE}notice{RESET}] Downloading {url}...")
    urllib.request.urlretrieve(url, dest)
    print(f"[{GREEN}success{RESET}] Saved to {dest}")

def updateDatabase():
    print(f"[{BLUE}notice{RESET}] Fetching latest package database...")
    try:
        with urllib.request.urlopen(DB_URL) as response:
            data = response.read().decode("utf-8")
            if data != "{}":
                with open(DB_FILE, "w") as f:
                    f.write(data)
                print(f"[{GREEN}success{RESET}] Database is up to date.")
            else:
                print(f"[{RED}error{RESET}] The database was empty, using current database.")
        
    except Exception as e:
        print(f"[{RED}error{RESET}] Failed to update database: {e}")
        sys.exit(1)

def loadDatabase():
    if not os.path.exists(DB_FILE):
        print(f"[{RED}error{RESET}] Database not found. Run `update` first.")
        sys.exit(1)
    with open(DB_FILE, "r") as f:
        return json.load(f)

def cloneRepo(gitUrl, destDir):
    if os.path.exists(destDir):
        print(f"[{BLUE}notice{RESET}] {destDir} already exists, skipping clone.")
        return
    print(f"[{BLUE}notice{RESET}] Cloning {gitUrl} into {destDir}...")
    subprocess.run(["git", "clone", gitUrl, destDir], check=True)

def getRepoSize(url):
    match = re.match(r"https?://github\.com/([^/]+)/([^/]+?)(\.git)?$", url)
    if not match:
        return None
    owner, repo = match.group(1), match.group(2)
    resp = requests.get(f"https://api.github.com/repos/{owner}/{repo}")
    if resp.status_code == 200:
        return round(resp.json().get("size", 0), 2)
    return None

def installPackage(pkgName, db, installed, confirm):
    if pkgName in installed:
        return
    if pkgName not in db:
        print(f"[{RED}error{RESET}]Package '{pkgName}' not found in database.")
        sys.exit(1)

    info = db[pkgName]
    print(info)
    print(f"Total download size: {getRepoSize(info["url"])} KB")
    if confirm:
        if input(f"Install {pkgName}? [Y/n] ").lower() not in ["", " ", "y", "yes"]:
            sys.exit()

    for dep in info.get("deps", []):
        installPackage(dep, db, installed, False)

    os.makedirs(PKG_DIR, exist_ok=True)
    destPath = os.path.join(PKG_DIR, pkgName)
    cloneRepo(info["url"], destPath)
    sha = get_latest_commit_sha(info["url"])
    if sha:
        save_installed_commit(pkgName, sha)

    if info.get("pypi"):
        pypiDeps = info["pypi"]
        if isinstance(pypiDeps, str):
            pypiDeps = pypiDeps.split()

        print(f"[{BLUE}notice{RESET}] Installing PyPI dependencies for {pkgName}...")
        try:
            subprocess.run(["pip", "install"] + pypiDeps, check=True)
        except FileNotFoundError:
            try:
                subprocess.run(["python3", "-m", "pip", "install"] + pypiDeps, check=True)
            except Exception as e:
                print(f"[{RED}error{RESET}] pip install failed: {e}")
                sys.exit(1)

    for cmd in info.get("other", []):
        print(f"[{BLUE}notice{RESET}] Running: {cmd}")
        subprocess.run(cmd, shell=True, check=True)

    installed.add(pkgName)
    print(f"[{GREEN}success{RESET}] Installed {pkgName} at {SCRDIR}/packages/{pkgName}.")

def upgradePackages():
    db = loadDatabase()
    installed_commits = load_installed_commits()

    for pkgName, info in db.items():
        current_sha = installed_commits.get(pkgName)
        latest_sha = get_latest_commit_sha(info["url"])

        if not latest_sha:
            print(f"[{RED}error{RESET}] Could not retrieve latest commit for {pkgName}.")
            continue

        if current_sha == latest_sha:
            print(f"[{BLUE}notice{RESET}] {pkgName} is already up to date.")
            continue

        print(f"[{BLUE}notice{RESET}] Upgrading {pkgName}...")
        removePackage(pkgName, False)
        installPackage(pkgName, db, set(), False)


def generate_secret(length=16):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

def hash_secret(secret):
    return hashlib.sha256(secret.encode('utf-8')).hexdigest()

def addPackageFromManifest(path):
    if not os.path.exists(path):
        print(f"[{RED}error{RESET}] Manifest file {path} not found.")
        sys.exit(1)

    with open(path, "r") as f:
        manifest = json.load(f)

    if "name" not in manifest or "url" not in manifest:
        print(f"[{RED}error{RESET}] Manifest must include 'name' and 'url'.")
        sys.exit(1)

    if "secret" not in manifest:
        manifest["secret"] = generate_secret()

    hashed_secret = hash_secret(manifest["secret"])
    print(f"Your secret is {manifest["secret"]}.") 
    payload = {
        "name": manifest["name"],
        "url": manifest["url"],
        "deps": manifest.get("zpkg", []),
        "pypi": manifest.get("pypi", []),
        "other": manifest.get("other", []),
        "secret": hashed_secret  
    }

    try:
        response = requests.post(FLASK_API_ADD, json=payload)
        if response.status_code == 200:
            print(f"[{GREEN}success{RESET}] Package '{manifest['name']}' added successfully.")
            
        else:
            print(f"[{RED}error{RESET}] Error adding package: {response.text}")
    except Exception as e:
        print(f"[{RED}error{RESET}] Failed to contact server: {e}")
import os

def getsize(path):
    total = 0
    for root, dirs, files in os.walk(path):
        for f in files:
            fp = os.path.join(root, f)
            if os.path.isfile(fp):
                size = os.path.getsize(fp)
                total += size
                # print(fp, size)
    return total / 1000

def removePackage(pkgName, confirm):
    pkgPath = os.path.join(PKG_DIR, pkgName)
    if os.path.exists(pkgPath):
        print(f"Total installed size: {getsize(pkgPath)} KB")
        if not confirm or input(f"Uninstall {pkgName}? [y/N] ").lower() in ["y", "yes"]: 
            print(f"[{BLUE}notice{RESET}] Removing package: {pkgPath}")
            shutil.rmtree(pkgPath)
            print(f"[{GREEN}success{RESET}] Removed {pkgPath}.")
    else:
        print(f"[{RED}error{RESET}] Package '{pkgName}' not found locally.")

def hash_secret(secret):
    return hashlib.sha256(secret.encode('utf-8')).hexdigest()

def removeRemote(pkgName, secret):
    hashed_secret = hash_secret(secret)

    pkgPath = os.path.join(PKG_DIR, pkgName)
    if os.path.exists(pkgPath):
        print(f"[{BLUE}notice{RESET}] Removing package from local filesystem: {pkgPath}")
        shutil.rmtree(pkgPath)
    try:
        payload = {"name": pkgName, "secret": hashed_secret}  
        response = requests.post(FLASK_API_REMOVE, json=payload)

        if response.status_code == 200:
            print(f"[{GREEN}success{RESET}] Package '{pkgName}' removed from database.")
        else:
            print(f"[{RED}error{RESET}] Error removing package from database: {response.text}")
    except Exception as e:
        print(f"[{RED}error{RESET}] Failed to contact server: {e}")

def self_update():
    SCRIPT_URL = "https://raw.githubusercontent.com/Typhoonz0/zpkg/main/zpkg"
    try:
        print(f"[{BLUE}notice{RESET}] Downloading latest version of zpkg...")
        with urllib.request.urlopen(SCRIPT_URL) as response:
            new_code = response.read().decode("utf-8")
        script_path = os.path.abspath(__file__)
        with open(script_path, "w") as f:
            f.write(new_code)
        print(f"[{GREEN}success{RESET}] zpkg has been updated.")
    except Exception as e:
        print(f"[{RED}error{RESET}] Failed to update script: {e}")

def get_latest_commit_sha(repo_url):
    if not repo_url.endswith(".git"):
        print(f"[{RED}error{RESET}] Invalid GitHub URL: {repo_url}")
        return None
    parts = repo_url[:-4].split("/")
    if len(parts) < 2:
        return None
    user, repo = parts[-2], parts[-1]
    api_url = f"https://api.github.com/repos/{user}/{repo}/commits/main"

    try:
        res = requests.get(api_url)
        if res.status_code == 200:
            return res.json()["sha"]
    except Exception as e:
        print(f"[{RED}error{RESET}] Failed to fetch commit: {e}")
    return None

COMMIT_TRACKER = os.path.join(SCRDIR, ".pkg-commits.json")

def load_installed_commits():
    if os.path.exists(COMMIT_TRACKER):
        with open(COMMIT_TRACKER, "r") as f:
            return json.load(f)
    return {}

def save_installed_commit(pkg, sha):
    commits = load_installed_commits()
    commits[pkg] = sha
    with open(COMMIT_TRACKER, "w") as f:
        json.dump(commits, f)

def whatsNew():
    print(f"{GREEN}zpkg{RESET} Version", VERSION)
    print(f"""[{GREEN}Added{RESET}]:
whats-new - Print this
list-local - List installed packages
docs - Added documentation for basic commands
query - See package details in database
query-local - See package details of installed packages

[{BLUE}Changed{RESET}]:
upgrade - Upgrades all packages at once
confirmation when installing and uninstalling packages""")

def zpkgHelp():
    print(f"[{GREEN}zpkg{RESET}] ez package manager")
    print("<> = example args, <a|b> one of either arg\n")
    
    print("install <package> - Install a package")
    print("uninstall <package> - Remove a package")
    print("update - Download the newest database")
    print("upgrade - Download the newest version of all packages")
    print("self-update - Download the newest version of zpkg\n")

    print("add <manifest.json> - Add a package to the database")
    print("remove <package> <secret> - Remove a package from the database\n")

    print("list - List packages in database")
    print("list-local - List installed packages")
    print("query <package> - List <package> details in database")
    print("query-local <package> - List <package> details if installed\n")

    print("whats-new - Print new changes to zpkg")
    print("docs <add|remove|update|upgrade|install|uninstall> - Print a manual of a topic")
    print("version - Returns the version of zpkg")
    print("help - prints this message")

def main():
    if len(sys.argv) < 2:
        zpkgHelp()
        sys.exit()

    command = sys.argv[1]

    if command == "install":
        if len(sys.argv) < 3:
            print(f"[{RED}error{RESET}] Usage: zpkg install <package>")
            return
        db = loadDatabase()
        if "-y" in sys.argv: c = False 
        else: c = True
        installPackage(sys.argv[2], db, set(), c)
    elif command == "uninstall":
        if len(sys.argv) < 3:
            print(f"[{RED}error{RESET}] Usage: zpkg uninstall <package>")
            return
        if "-y" in sys.argv: c = False 
        else: c = True
        removePackage(sys.argv[2], c)
    if command == "update":
        updateDatabase()
    elif command == "upgrade":
        upgradePackages()
    elif command == "self-update":
        self_update()

    elif command == "add":
        if len(sys.argv) < 3:
            print(f"[{RED}error{RESET}] Usage: zpkg add <manifest.json>")
            return
        addPackageFromManifest(sys.argv[2])
    elif command == "remove":
        if len(sys.argv) < 4:
            print(f"[{RED}error{RESET}] Usage: zpkg remove <pkg> <secret>")
            return
        removeRemote(sys.argv[2], sys.argv[3])

    elif command == "list":
        listPackages()
    elif command == "list-local":
        listLocalPackages()
    elif command == "query":
        if len(sys.argv) < 3:
            print(f"[{RED}error{RESET}] Usage: zpkg query <pkg>")
            return
        queryPackage(sys.argv[2])
    elif command == "query-local":
        if len(sys.argv) < 3:
            print(f"[{RED}error{RESET}] Usage: zpkg query-local <pkg>")
            return
        queryLocalPackage(sys.argv[2])
    elif command == "whats-new":
        whatsNew()
    elif command == "docs":
        if len(sys.argv) < 3:
            print(f"[{RED}error{RESET}] Usage: zpkg docs <add|remove|update|upgrade|install|uninstall>")
            return
        docs(sys.argv[2])
    elif command == "version":
        print(VERSION)
    elif command == "help": 
        zpkgHelp()
    # else:
    #     print(f"[{RED}error{RESET}] Unknown command: {command}. Type zpkg help for a list of commands.")

if __name__ == "__main__":
    main()
